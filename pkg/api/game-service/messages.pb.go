// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/game-service/messages.proto

package apigameservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Choice struct {
	ID   int32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *Choice) Reset()      { *m = Choice{} }
func (*Choice) ProtoMessage() {}
func (*Choice) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8851b4afd8c7fd, []int{0}
}
func (m *Choice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Choice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Choice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Choice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Choice.Merge(m, src)
}
func (m *Choice) XXX_Size() int {
	return m.Size()
}
func (m *Choice) XXX_DiscardUnknown() {
	xxx_messageInfo_Choice.DiscardUnknown(m)
}

var xxx_messageInfo_Choice proto.InternalMessageInfo

func (m *Choice) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Choice) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Get Choices
type GetChoicesRequest struct {
}

func (m *GetChoicesRequest) Reset()      { *m = GetChoicesRequest{} }
func (*GetChoicesRequest) ProtoMessage() {}
func (*GetChoicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8851b4afd8c7fd, []int{1}
}
func (m *GetChoicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChoicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChoicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChoicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChoicesRequest.Merge(m, src)
}
func (m *GetChoicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetChoicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChoicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetChoicesRequest proto.InternalMessageInfo

type GetChoicesResponse struct {
	Choices []*Choice `protobuf:"bytes,1,rep,name=Choices,proto3" json:"Choices,omitempty"`
}

func (m *GetChoicesResponse) Reset()      { *m = GetChoicesResponse{} }
func (*GetChoicesResponse) ProtoMessage() {}
func (*GetChoicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8851b4afd8c7fd, []int{2}
}
func (m *GetChoicesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChoicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChoicesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChoicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChoicesResponse.Merge(m, src)
}
func (m *GetChoicesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetChoicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChoicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetChoicesResponse proto.InternalMessageInfo

func (m *GetChoicesResponse) GetChoices() []*Choice {
	if m != nil {
		return m.Choices
	}
	return nil
}

// Get Random Choice
type GetRandomChoiceRequest struct {
}

func (m *GetRandomChoiceRequest) Reset()      { *m = GetRandomChoiceRequest{} }
func (*GetRandomChoiceRequest) ProtoMessage() {}
func (*GetRandomChoiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8851b4afd8c7fd, []int{3}
}
func (m *GetRandomChoiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRandomChoiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRandomChoiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRandomChoiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRandomChoiceRequest.Merge(m, src)
}
func (m *GetRandomChoiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRandomChoiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRandomChoiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRandomChoiceRequest proto.InternalMessageInfo

type GetRandomChoiceResponse struct {
	Choice *Choice `protobuf:"bytes,1,opt,name=Choice,proto3" json:"Choice,omitempty"`
}

func (m *GetRandomChoiceResponse) Reset()      { *m = GetRandomChoiceResponse{} }
func (*GetRandomChoiceResponse) ProtoMessage() {}
func (*GetRandomChoiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8851b4afd8c7fd, []int{4}
}
func (m *GetRandomChoiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRandomChoiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRandomChoiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRandomChoiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRandomChoiceResponse.Merge(m, src)
}
func (m *GetRandomChoiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRandomChoiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRandomChoiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRandomChoiceResponse proto.InternalMessageInfo

func (m *GetRandomChoiceResponse) GetChoice() *Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

// Play
type PlayRequest struct {
	Player1ChoiceID int32 `protobuf:"varint,1,opt,name=Player1ChoiceID,proto3" json:"Player1ChoiceID,omitempty"`
	Player2ChoiceID int32 `protobuf:"varint,2,opt,name=Player2ChoiceID,proto3" json:"Player2ChoiceID,omitempty"`
}

func (m *PlayRequest) Reset()      { *m = PlayRequest{} }
func (*PlayRequest) ProtoMessage() {}
func (*PlayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8851b4afd8c7fd, []int{5}
}
func (m *PlayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayRequest.Merge(m, src)
}
func (m *PlayRequest) XXX_Size() int {
	return m.Size()
}
func (m *PlayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlayRequest proto.InternalMessageInfo

func (m *PlayRequest) GetPlayer1ChoiceID() int32 {
	if m != nil {
		return m.Player1ChoiceID
	}
	return 0
}

func (m *PlayRequest) GetPlayer2ChoiceID() int32 {
	if m != nil {
		return m.Player2ChoiceID
	}
	return 0
}

type PlayResponse struct {
	Result string `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (m *PlayResponse) Reset()      { *m = PlayResponse{} }
func (*PlayResponse) ProtoMessage() {}
func (*PlayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8851b4afd8c7fd, []int{6}
}
func (m *PlayResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayResponse.Merge(m, src)
}
func (m *PlayResponse) XXX_Size() int {
	return m.Size()
}
func (m *PlayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlayResponse proto.InternalMessageInfo

func (m *PlayResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*Choice)(nil), "apigameservice.Choice")
	proto.RegisterType((*GetChoicesRequest)(nil), "apigameservice.GetChoicesRequest")
	proto.RegisterType((*GetChoicesResponse)(nil), "apigameservice.GetChoicesResponse")
	proto.RegisterType((*GetRandomChoiceRequest)(nil), "apigameservice.GetRandomChoiceRequest")
	proto.RegisterType((*GetRandomChoiceResponse)(nil), "apigameservice.GetRandomChoiceResponse")
	proto.RegisterType((*PlayRequest)(nil), "apigameservice.PlayRequest")
	proto.RegisterType((*PlayResponse)(nil), "apigameservice.PlayResponse")
}

func init() { proto.RegisterFile("api/game-service/messages.proto", fileDescriptor_8c8851b4afd8c7fd) }

var fileDescriptor_8c8851b4afd8c7fd = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xc1, 0x4e, 0xe2, 0x50,
	0x14, 0xed, 0xeb, 0x30, 0x4c, 0xb8, 0x4c, 0x20, 0xf3, 0x26, 0x61, 0x1a, 0x66, 0xf2, 0x06, 0xdf,
	0x02, 0xbb, 0xd0, 0xa2, 0xe8, 0x17, 0x08, 0x91, 0xb0, 0x31, 0xa6, 0xc6, 0x0f, 0x78, 0xc2, 0x0d,
	0x36, 0xa1, 0xb4, 0xf2, 0x8a, 0x89, 0x3b, 0xff, 0x40, 0x3f, 0xc3, 0x4f, 0x71, 0xc9, 0x92, 0xa5,
	0x94, 0x8d, 0x4b, 0x3e, 0xc1, 0xd0, 0x3e, 0x0a, 0x16, 0xd4, 0x5d, 0xdf, 0x39, 0xe7, 0xde, 0x73,
	0xee, 0x49, 0xe1, 0xbf, 0xf0, 0x9d, 0x5a, 0x4f, 0xb8, 0xb8, 0x2f, 0x71, 0x78, 0xeb, 0x74, 0xb0,
	0xe6, 0xa2, 0x94, 0xa2, 0x87, 0xd2, 0xf2, 0x87, 0x5e, 0xe0, 0xd1, 0x82, 0xf0, 0x9d, 0x05, 0xaf,
	0x68, 0xbe, 0x07, 0xd9, 0xc6, 0xb5, 0xe7, 0x74, 0x90, 0x16, 0x40, 0x6f, 0x37, 0x0d, 0x52, 0x21,
	0xe6, 0x77, 0x5b, 0x6f, 0x37, 0x29, 0x85, 0xcc, 0x99, 0x70, 0xd1, 0xd0, 0x2b, 0xc4, 0xcc, 0xd9,
	0xd1, 0x37, 0xff, 0x0d, 0xbf, 0x5a, 0x18, 0xc4, 0x03, 0xd2, 0xc6, 0x9b, 0x11, 0xca, 0x80, 0x9f,
	0x02, 0x5d, 0x07, 0xa5, 0xef, 0x0d, 0x24, 0xd2, 0x03, 0xf8, 0xa1, 0x20, 0x83, 0x54, 0xbe, 0x99,
	0xf9, 0x7a, 0xc9, 0x7a, 0x6f, 0x6d, 0xc5, 0xb4, 0xbd, 0x94, 0x71, 0x03, 0x4a, 0x2d, 0x0c, 0x6c,
	0x31, 0xe8, 0x7a, 0xae, 0xe2, 0x94, 0x43, 0x1b, 0xfe, 0x6c, 0x30, 0xca, 0xc6, 0x5a, 0xe6, 0x8f,
	0x92, 0x7f, 0xec, 0xa2, 0x54, 0x5c, 0x40, 0xfe, 0xbc, 0x2f, 0xee, 0xd4, 0x66, 0x6a, 0x42, 0x71,
	0xf1, 0xc4, 0xe1, 0x61, 0xcc, 0x27, 0x0d, 0xa4, 0xe1, 0x95, 0xb2, 0x9e, 0x28, 0xf5, 0x75, 0x65,
	0x02, 0xf3, 0x2a, 0xfc, 0x8c, 0x2d, 0x54, 0xc4, 0x12, 0x64, 0x6d, 0x94, 0xa3, 0x7e, 0x10, 0xad,
	0xce, 0xd9, 0xea, 0x55, 0x7f, 0xd0, 0x21, 0xdf, 0x12, 0x2e, 0x5e, 0xc4, 0x49, 0xe9, 0x25, 0xc0,
	0xaa, 0x47, 0xba, 0x93, 0x3e, 0x64, 0xa3, 0xf8, 0x32, 0xff, 0x4c, 0x12, 0x9b, 0x73, 0x8d, 0x76,
	0xa1, 0x98, 0x2a, 0x8f, 0x56, 0xb7, 0x0c, 0x6e, 0xe9, 0xbd, 0xbc, 0xfb, 0xa5, 0x2e, 0x71, 0x69,
	0x40, 0x66, 0x71, 0x34, 0xfd, 0x9b, 0x1e, 0x59, 0x6b, 0xbb, 0xfc, 0x6f, 0x3b, 0xb9, 0x5c, 0x72,
	0x72, 0x3c, 0x9e, 0x32, 0x6d, 0x32, 0x65, 0xda, 0x7c, 0xca, 0xc8, 0x7d, 0xc8, 0xc8, 0x53, 0xc8,
	0xc8, 0x73, 0xc8, 0xc8, 0x38, 0x64, 0xe4, 0x25, 0x64, 0xe4, 0x35, 0x64, 0xda, 0x3c, 0x64, 0xe4,
	0x71, 0xc6, 0xb4, 0xf1, 0x8c, 0x69, 0x93, 0x19, 0xd3, 0xae, 0xb2, 0xd1, 0x9f, 0x7d, 0xf4, 0x16,
	0x00, 0x00, 0xff, 0xff, 0x24, 0x41, 0xe8, 0x49, 0xfc, 0x02, 0x00, 0x00,
}

func (this *Choice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Choice)
	if !ok {
		that2, ok := that.(Choice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GetChoicesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetChoicesRequest)
	if !ok {
		that2, ok := that.(GetChoicesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetChoicesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetChoicesResponse)
	if !ok {
		that2, ok := that.(GetChoicesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Choices) != len(that1.Choices) {
		return false
	}
	for i := range this.Choices {
		if !this.Choices[i].Equal(that1.Choices[i]) {
			return false
		}
	}
	return true
}
func (this *GetRandomChoiceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRandomChoiceRequest)
	if !ok {
		that2, ok := that.(GetRandomChoiceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetRandomChoiceResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRandomChoiceResponse)
	if !ok {
		that2, ok := that.(GetRandomChoiceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Choice.Equal(that1.Choice) {
		return false
	}
	return true
}
func (this *PlayRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlayRequest)
	if !ok {
		that2, ok := that.(PlayRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Player1ChoiceID != that1.Player1ChoiceID {
		return false
	}
	if this.Player2ChoiceID != that1.Player2ChoiceID {
		return false
	}
	return true
}
func (this *PlayResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlayResponse)
	if !ok {
		that2, ok := that.(PlayResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *Choice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&apigameservice.Choice{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetChoicesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&apigameservice.GetChoicesRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetChoicesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&apigameservice.GetChoicesResponse{")
	if this.Choices != nil {
		s = append(s, "Choices: "+fmt.Sprintf("%#v", this.Choices)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRandomChoiceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&apigameservice.GetRandomChoiceRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRandomChoiceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&apigameservice.GetRandomChoiceResponse{")
	if this.Choice != nil {
		s = append(s, "Choice: "+fmt.Sprintf("%#v", this.Choice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PlayRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&apigameservice.PlayRequest{")
	s = append(s, "Player1ChoiceID: "+fmt.Sprintf("%#v", this.Player1ChoiceID)+",\n")
	s = append(s, "Player2ChoiceID: "+fmt.Sprintf("%#v", this.Player2ChoiceID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PlayResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&apigameservice.PlayResponse{")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessages(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GameServiceClient is the client API for GameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GameServiceClient interface {
	GetChoices(ctx context.Context, in *GetChoicesRequest, opts ...grpc.CallOption) (*GetChoicesResponse, error)
	GetRandomChoice(ctx context.Context, in *GetRandomChoiceRequest, opts ...grpc.CallOption) (*GetRandomChoiceResponse, error)
	Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayResponse, error)
}

type gameServiceClient struct {
	cc *grpc.ClientConn
}

func NewGameServiceClient(cc *grpc.ClientConn) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) GetChoices(ctx context.Context, in *GetChoicesRequest, opts ...grpc.CallOption) (*GetChoicesResponse, error) {
	out := new(GetChoicesResponse)
	err := c.cc.Invoke(ctx, "/apigameservice.GameService/GetChoices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetRandomChoice(ctx context.Context, in *GetRandomChoiceRequest, opts ...grpc.CallOption) (*GetRandomChoiceResponse, error) {
	out := new(GetRandomChoiceResponse)
	err := c.cc.Invoke(ctx, "/apigameservice.GameService/GetRandomChoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayResponse, error) {
	out := new(PlayResponse)
	err := c.cc.Invoke(ctx, "/apigameservice.GameService/Play", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServiceServer is the server API for GameService service.
type GameServiceServer interface {
	GetChoices(context.Context, *GetChoicesRequest) (*GetChoicesResponse, error)
	GetRandomChoice(context.Context, *GetRandomChoiceRequest) (*GetRandomChoiceResponse, error)
	Play(context.Context, *PlayRequest) (*PlayResponse, error)
}

// UnimplementedGameServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGameServiceServer struct {
}

func (*UnimplementedGameServiceServer) GetChoices(ctx context.Context, req *GetChoicesRequest) (*GetChoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChoices not implemented")
}
func (*UnimplementedGameServiceServer) GetRandomChoice(ctx context.Context, req *GetRandomChoiceRequest) (*GetRandomChoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomChoice not implemented")
}
func (*UnimplementedGameServiceServer) Play(ctx context.Context, req *PlayRequest) (*PlayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Play not implemented")
}

func RegisterGameServiceServer(s *grpc.Server, srv GameServiceServer) {
	s.RegisterService(&_GameService_serviceDesc, srv)
}

func _GameService_GetChoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetChoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apigameservice.GameService/GetChoices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetChoices(ctx, req.(*GetChoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetRandomChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomChoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetRandomChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apigameservice.GameService/GetRandomChoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetRandomChoice(ctx, req.(*GetRandomChoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_Play_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).Play(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apigameservice.GameService/Play",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).Play(ctx, req.(*PlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GameService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apigameservice.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChoices",
			Handler:    _GameService_GetChoices_Handler,
		},
		{
			MethodName: "GetRandomChoice",
			Handler:    _GameService_GetRandomChoice_Handler,
		},
		{
			MethodName: "Play",
			Handler:    _GameService_Play_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/game-service/messages.proto",
}

func (m *Choice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Choice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Choice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetChoicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChoicesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetChoicesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetChoicesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChoicesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetChoicesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Choices) > 0 {
		for iNdEx := len(m.Choices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Choices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetRandomChoiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRandomChoiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRandomChoiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetRandomChoiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRandomChoiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRandomChoiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Choice != nil {
		{
			size, err := m.Choice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Player2ChoiceID != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.Player2ChoiceID))
		i--
		dAtA[i] = 0x10
	}
	if m.Player1ChoiceID != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.Player1ChoiceID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessages(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessages(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Choice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMessages(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *GetChoicesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetChoicesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Choices) > 0 {
		for _, e := range m.Choices {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	return n
}

func (m *GetRandomChoiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetRandomChoiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Choice != nil {
		l = m.Choice.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *PlayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Player1ChoiceID != 0 {
		n += 1 + sovMessages(uint64(m.Player1ChoiceID))
	}
	if m.Player2ChoiceID != 0 {
		n += 1 + sovMessages(uint64(m.Player2ChoiceID))
	}
	return n
}

func (m *PlayResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func sovMessages(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessages(x uint64) (n int) {
	return sovMessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Choice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Choice{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetChoicesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetChoicesRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetChoicesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForChoices := "[]*Choice{"
	for _, f := range this.Choices {
		repeatedStringForChoices += strings.Replace(f.String(), "Choice", "Choice", 1) + ","
	}
	repeatedStringForChoices += "}"
	s := strings.Join([]string{`&GetChoicesResponse{`,
		`Choices:` + repeatedStringForChoices + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRandomChoiceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRandomChoiceRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetRandomChoiceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRandomChoiceResponse{`,
		`Choice:` + strings.Replace(this.Choice.String(), "Choice", "Choice", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PlayRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PlayRequest{`,
		`Player1ChoiceID:` + fmt.Sprintf("%v", this.Player1ChoiceID) + `,`,
		`Player2ChoiceID:` + fmt.Sprintf("%v", this.Player2ChoiceID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PlayResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PlayResponse{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessages(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Choice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Choice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Choice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChoicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChoicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChoicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChoicesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChoicesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChoicesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Choices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Choices = append(m.Choices, &Choice{})
			if err := m.Choices[len(m.Choices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRandomChoiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRandomChoiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRandomChoiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRandomChoiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRandomChoiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRandomChoiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Choice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Choice == nil {
				m.Choice = &Choice{}
			}
			if err := m.Choice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player1ChoiceID", wireType)
			}
			m.Player1ChoiceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Player1ChoiceID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player2ChoiceID", wireType)
			}
			m.Player2ChoiceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Player2ChoiceID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessages
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessages
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessages
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessages        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessages          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessages = fmt.Errorf("proto: unexpected end of group")
)
